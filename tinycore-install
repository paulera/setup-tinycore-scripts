###############################################################################
#
# This script installs the tinycore linux from a the Core Bootable ISO. It is
# a very tipical installation, using the whole disk as ext4 primary partition.
#
# 1) Download the Core ISO from http://tinycorelinux.net/downloads.html (11 MB)
#
# 2) Create a virtual machine and boot the ISO. (press [Return] when asked)
#
# 3) Download and run this script:
#
#         tce-load -w -i openssl.tcz                  <- enable ssl (for https)
#         wget git.io/tinycore-install                <- download script
#         sh tinycore-install                         <- run
#
# 3) What tinycore-install does:
#    - Create and format a single partition using whole disk space
#    - Install Kernel
#    - Install GRUB
#    - Setup GRUB to boot from disk
# 
# Credits:
# By paulo.amaral(a)gmail(dot)com - https://github.com/paulera
# Based on @smileymattj tutorial: http://www.youtube.com/watch?v=0QMY3V5XLj8
#
############################################################ version 1.0b #####

#!/bin/sh

step() {
	echo -e "\e[1;36m+++ $1\e[0m";
}

ok() {
	echo -e "\e[32m[success] \e[0m\n";
}

err() {
	{ set +x; } 2>/dev/null
	echo -e "\n\e[1;31mERROR! Check last command output for details.\e[0m";
	echo -e "\nInstallation aborted.\n";
	exit 1
}

pause() {
	echo -e "\e[1;30mPress [return] for next step...\e[0m"
	read
}

echo
echo "This will setup your partitions, install kernel and grub, and any"
echo "existing data will be lost. Just make sure you run this in a clean"
echo "environment, from the bootable ISO, and you should be fine."
echo
read -p "Continue (y/n)? " -n 1 -r
echo
echo

if [[ "$REPLY" = "Y" ]] || [[ "$REPLY" = "y" ]]; then

	TOTAL=10

	# ------------------------------------
	step "1 of $TOTAL. Create partition\n"

	set -x
	sudo sh -c 'echo -e "n\np\n1\n\n\n\n\na\n1\nw" | fdisk /dev/sda' || err
	{ set +x; } 2>/dev/null
	ok

	pause

	# ------------------------------------
	step "2 of $TOTAL. Format partition\n"
	
	set -x
	sudo mkfs.ext4 /dev/sda1 || err
	{ set +x; } 2>/dev/null
	ok

	set -x
	sudo rebuildfstab || err
	{ set +x; } 2>/dev/null
	ok

	pause

	# ------------------------------------
	step "3 of $TOTAL. Mount Disk and CD\n"
	
	set -x
	sudo mount /mnt/sda1 || err
	{ set +x; } 2>/dev/null
	ok

	set -x
	sudo mount /mnt/sr0 || err
	{ set +x; } 2>/dev/null
	ok

	pause

	# ------------------------------------
	step "4 of $TOTAL. Create directories\n"

	set -x
	sudo mkdir -p /mnt/sda1/boot/grub || err
	{ set +x; } 2>/dev/null
	ok

	set -x
	sudo mkdir -p /mnt/sda1/tce/optional || err
	{ set +x; } 2>/dev/null
	ok

	pause

	# ------------------------------------
	step "5 of $TOTAL. Copy kernel\n"

	set -x
	sudo cp -p /mnt/sr0/boot/core.gz /mnt/sda1/boot/ || err
	{ set +x; } 2>/dev/null
	ok

	set -x
	sudo cp -p /mnt/sr0/boot/vmlinuz /mnt/sda1/boot/ || err
	{ set +x; } 2>/dev/null
	ok

	pause

	# ------------------------------------
	step "7 of $TOTAL. Install grub\n"
	
	set -x
	tce-load -w -i grub-0.97-splash.tcz || err
	{ set +x; } 2>/dev/null
	ok

	set -x
	sudo cp -p /usr/lib/grub/i386-pc/* /mnt/sda1/boot/grub/ || err
	{ set +x; } 2>/dev/null
	ok

	pause

	# ------------------------------------
	step "8 of $TOTAL. Create menu for GRUB\n"

	echo "This makes /home and /opt persistent in /sda1 . If you don't want this, edit"
	echo "        /mnt/sda1/boot/grub/menu.lst"
	echo "and REMOVE"
	echo "        opt=sda1 home=sda1"

	set -x
	sudo sh -c 'echo -e "default 0\ntimeout 0\ntitle MicroCore\nkernel /boot/vmlinuz opt=sda1 home=sda1\ninitrd /boot/core.gz" > /mnt/sda1/boot/grub/menu.lst'  || err
	{ set +x; } 2>/dev/null
	ok

	pause

	# ------------------------------------
	step "9 of $TOTAL. Create master boot record\n"

	set -x
	sudo sh -c 'echo -e "root (hd0,0)\nsetup (hd0)\nquit" | grub --batch' || err
	{ set +x; } 2>/dev/null
	ok

	pause

	# ------------------------------------
	step "10 of $TOTAL. Tunning\n"

	echo "Creating /mnt/sda1/tce/mydata.tgz for persistence"
	set -x
	sudo touch /mnt/sda1/tce/mydata.tgz || err
	{ set +x; } 2>/dev/null
	ok

	echo "Creating /opt/bin and /opt/sbin directories for custom scripts"
	set -x
	sudo mkdir /opt/sbin || err
	sudo chown root:staff /opt/sbin || err
	sudo chmod -R 740 /opt/sbin || err
	sudo mkdir /opt/bin || err
	sudo chown root:staff /opt/bin || err
	sudo chmod -R 770 /opt/bin || err
	{ set +x; } 2>/dev/null
	ok

	echo "Create script: /opt/sbin/shutdown (with persistence)"
	set -x
	sudo sh -c 'echo "#!/bin/sh
/usr/bin/filetool.sh -b
/opt/shutdown.sh
sudo /usr/bin/exitcheck.sh shutdown" > /opt/bin/shutdown' || err
	{ set +x; } 2>/dev/null
	ok

	echo "Create script: /opt/sbin/reboot (with persistence)"
	set -x
	sudo sh -c 'echo "#!/bin/sh
/usr/bin/filetool.sh -b
/opt/shutdown.sh
sudo /usr/bin/exitcheck.sh reboot" > /opt/bin/reboot' || err
	{ set +x; } 2>/dev/null
	ok

	echo "Add to \$PATH: ~/bin;/opt/sbin;/opt/bin"
	set -x
	sudo sh -c 'echo "export PATH=~/bin;/opt/sbin;/opt/bin;\$PATH >> /opt/bootlocal.sh' || err
	{ set +x; } 2>/dev/null
	ok

	echo "Update persistence list"
	set -x
	# persist users accounts
	sudo echo etc/passwd >>/opt/.filetool.lst || err
	sudo echo etc/shadow >>/opt/.filetool.lst || err
	{ set +x; } 2>/dev/null
	ok

	pause

	# ------------------------------------
	step "Done!\n"
	echo -e "Script finished. Remove ISO from drive and reboot.\n"

fi